#!/usr/bin/env php
<?php

namespace eXistenZNL\PermCheck;

use eXistenZNL\PermCheck\Config\Config;
use eXistenZNL\PermCheck\Config\Loader\Xml as XmlLoader;
use eXistenZNL\PermCheck\Filesystem\Filesystem;
use eXistenZNL\PermCheck\Message\Bag as MessageBag;
use eXistenZNL\PermCheck\Reporter\Xml as XmlReporter;
use Pimple\Container;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

require_once(dirname(__DIR__) . '/../../autoload.php');

$input = new ArgvInput();
$output = new ConsoleOutput();

$configFile = $input->getParameterOption(array('--config', '-c'));
$directory = $input->getParameterOption(array('--directory', '-d'), getcwd());
$reportFile = $input->getParameterOption(array('--report', '-r'));

try {
    if ($configFile === false) {
        throw new \InvalidArgumentException('Missing argument --config (-c)');
    }
    if (!is_file($configFile)) {
        throw new \RuntimeException('Configuration file does not exist');
    }
} catch (\Exception $e) {
    $output->writeln('<fg=red>' . $e->getMessage() . '</>');
    exit (1);
}

// Assemble the DI
$container = new Container();
$container['configFile'] = $configFile;
$container['directory'] = $directory;
$container['reportFile'] = $reportFile;

$container['config'] = function ($c) {
    return new Config();
};
$container['filesystem'] = function ($c) {
    $filesystem = new Filesystem();
    $filesystem->setDirectory($c['directory']);
    return $filesystem;
};
$container['loader'] = function ($c) {
    return new XmlLoader(
        file_get_contents($c['configFile']),
        $c['config']
    );
};
$container['messageBag'] = function () {
    return new MessageBag();
};
$container['permCheck'] = function ($c) {
    return new PermCheck(
        $c['loader'],
        $c['filesystem'],
        $c['messageBag'],
        $c['reporter'],
        $c['directory']
    );
};
$container['reporter'] = function ($c) {
    return new XmlReporter();
};

try {
    $permCheck = $container['permCheck'];
    $permCheck->run();
    $errors = $permCheck->getErrors();
} catch (\Exception $e) {
    $output->writeln('<fg=red>' . $e->getMessage() . '</>');
    exit (1);
}

if ($errors->hasMessages()) {
    $output->writeln('<fg=yellow>Done, but with errors:</>');

    $messages = $errors->getMessages('minx');
    if (count($messages) > 0) {
        $output->writeln(PHP_EOL . '  <fg=yellow>Files that should NOT be executeble but are:</>');
        foreach ($messages as $file) {
            $output->writeln('    <fg=yellow>' . $file . '</>');
        }
    }

    $messages = $errors->getMessages('plusx');
    if (count($messages) > 0) {
        $output->writeln(PHP_EOL . '  <fg=yellow>Files that should be executeble but are NOT:</>');
        foreach ($messages as $file) {
            $output->writeln('    <fg=yellow>' . $file . '</>');
        }
    }
    exit(1);
}

$output->writeln('<fg=green>All done!</>');
exit(0);
