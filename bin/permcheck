#!/usr/bin/env php
<?php

namespace Enrise\PermCheck;

use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

require_once(__DIR__ . '/../../../autoload.php');

$input = new ArgvInput();
$output = new ConsoleOutput();

$params = [
    'config' => $input->getParameterOption(array('--config', '-c')),
    'directory' => $input->getParameterOption(array('--directory', '-d'), getcwd()),
    'report' => $input->getParameterOption(array('--report', '-r')),
];

$permCheck = new PermCheck();
$permCheck->setParams($params);

try {
    $errors = $permCheck->run();
} catch (\Exception $e) {
    $output->writeln('<fg=red>' . $e->getMessage() . '</>');
    exit (1);
}

if (count($errors['minx']) > 0 || count($errors['plusx']) > 0) {
    $output->writeln('<fg=yellow>Done, but with errors:</>');

    if (count($errors['minx']) > 0) {
        $output->writeln(PHP_EOL . '  <fg=yellow>Files that should NOT be executeble but are:</>');
        foreach ($errors['minx'] as $file) {
            $output->writeln('    <fg=yellow>' . $file . '</>');
        }
    }
    if (count($errors['plusx']) > 0) {
        $output->writeln(PHP_EOL . '  <fg=yellow>Files that should be executeble but are NOT:</>');
        foreach ($errors['plusx'] as $file) {
            $output->writeln('    <fg=yellow>' . $file . '</>');
        }
    }
    exit(1);
}

$output->writeln('<fg=green>All done!</>');
exit(0);

