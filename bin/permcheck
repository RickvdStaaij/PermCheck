#!/usr/bin/env php
<?php

namespace eXistenZNL\PermCheck;

use eXistenZNL\PermCheck\Config\Config;
use eXistenZNL\PermCheck\Config\Loader\Xml as XmlLoader;
use eXistenZNL\PermCheck\Filesystem\Filesystem;
use eXistenZNL\PermCheck\Message\Bag as MessageBag;
use eXistenZNL\PermCheck\Reporter\Xml as XmlReporter;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Reference;

if (is_file(__DIR__ . '/../../../../vendor/autoload.php')) {
    require_once(__DIR__ . '/../../../../vendor/autoload.php');
} elseif (is_file(__DIR__ . '/../vendor/autoload.php')) {
    require_once(__DIR__ . '/../vendor/autoload.php');
} else {
    echo 'Could not find the Composer Autoloader...quiting.' . PHP_EOL;
    die;
}

$input = new ArgvInput();
$output = new ConsoleOutput();

$configFile = $input->getParameterOption(array('--config', '-c'));
$directory = $input->getParameterOption(array('--directory', '-d'), getcwd());
$reportFile = $input->getParameterOption(array('--report', '-r'));

try {
    if ($configFile === false) {
        throw new \InvalidArgumentException('Missing argument --config (-c)');
    }
    if (!is_file($configFile)) {
        throw new \RuntimeException('Configuration file does not exist');
    }
} catch (\Exception $e) {
    $output->writeln('<fg=red>' . $e->getMessage() . '</>');
    exit (1);
}

$configFileContents = file_get_contents($configFile);

// Assemble the DI
$container = new ContainerBuilder();
$container->setParameter('configFileContents', $configFileContents);
$container->setParameter('directory', $directory);
$container->setParameter('reportFile', $reportFile);

$container->register('config', Config::class);

$container->register('filesystem', Filesystem::class)
    ->addArgument(new Reference('config'))
    ->addArgument('%directory%');

$container->register('loader', XmlLoader::class)
    ->addArgument('%configFileContents%')
    ->addArgument(new Reference('config'));

$container->register('messageBag', MessageBag::class);

$container->register('permCheck', PermCheck::class)
    ->addArgument(new Reference('loader'))
    ->addArgument(new Reference('config'))
    ->addArgument(new Reference('filesystem'))
    ->addArgument(new Reference('messageBag'))
    ->addArgument(new Reference('reporter'))
    ->addArgument('%directory%');

$container->register('reporter', XmlReporter::class);

try {
    $permCheck = $container->get('permCheck');
    $permCheck->run();
    $bag = $permCheck->getMessageBag();
} catch (\Exception $e) {
    $output->writeln('<fg=red>' . $e->getMessage() . '</>');
    exit (1);
}

if ($bag->hasMessages()) {
    $output->writeln('<fg=yellow>Done, but with errors:</>');

    $messages = $bag->getMessages('minx');
    if (count($messages) > 0) {
        $output->writeln(PHP_EOL . '  <fg=yellow>Files that should NOT be executeble but are:</>');
        foreach ($messages as $file) {
            $output->writeln('    <fg=yellow>' . $file . '</>');
        }
    }

    $messages = $bag->getMessages('plusx');
    if (count($messages) > 0) {
        $output->writeln(PHP_EOL . '  <fg=yellow>Files that should be executeble but are NOT:</>');
        foreach ($messages as $file) {
            $output->writeln('    <fg=yellow>' . $file . '</>');
        }
    }
    exit(1);
}

$output->writeln('<fg=green>No permission problems found!</>');
exit(0);
